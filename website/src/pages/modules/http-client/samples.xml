<?xml version="1.0" encoding="UTF-8"?>

<webpage menu="hc" root="../..">
   <title>EXPath - HTTP Client Samples</title>
   <section>
      <title>HTTP Client Samples</title>
      <image src="../../images/web3.jpg" alt="Machine"/>
      <para>Here are several examples of use of the <link href=".">HTTP Client</link> extension.
         They are either in XSLT or XQuery. XQuery samples have been written for and tested with
            <link href="http://www.exist-db.org/">eXist</link>, <link
            href="http://www.marklogic.com/">MarkLogic Server</link> and <link
            href="http://www.saxonica.com/">Saxon</link> 9. XSLT samples have been written for and
         tested with <link href="http://www.saxonica.com/">Saxon</link> 9. Details on how to use the
         extension with either product can be found on the <link href="implems">implementations
            page</link> (especially details on namespace URIs and how to import and/or install
         modules may vary.)</para>
      <para>You can also have a look at <link
            href="http://www.xmlprague.cz/2009/sessions.html#exslt">the presentation</link> I gave
         at XML Prague 2009 about this extension among other things (there are also the <link
            href="http://www.xmlprague.cz/2009/presentations/Florent-Georges-A-practical-introduction-to-EXSLT-2_0.pdf"
            >slides</link>, the <link href="http://river-valley.tv/conferences/xmlprague2009/"
            >video</link> and other <link href="http://www.fgeorges.org/exslt2/">related info</link>
         on my website.) The presentation was about EXSLT 2.0, but the extension presented there is
         the same.</para>
      <para>Besides the samples here, there are a WSDL compiler (compiling <link
            href="http://en.wikipedia.org/wiki/Web_Services_Description_Language">WSDL</link> files
         to XSLT and XQuery modules providing functions for each operation, using this HTTP Client)
         and a library of XSLT and XQuery modules to support the <link
            href="http://code.google.com/apis/gdata/">Google GData</link> protocol, based on REST,
         and providing convenient functions for several Google services (based on GDAta or not.)
         The WSDL compiler has not been released yet, but the Google APIs library can be found in the
         <link href="http://xlibs.googlecode.com/">project xlibs</link>.</para>
      <para>This page presents the following examples:</para>
      <list>
         <item>
            <link href="#exist">Accessing the eXist REST API</link>
         </item>
         <item>
            <link href="#contacts">Google Contacts API</link>
         </item>
         <item>
            <link href="#soap">SOAP request to a Web service</link>
         </item>
      </list>
   </section>
   <divider/>
   <section id="exist">
      <title>Accessing the eXist REST API</title>
      <para>The <link href="http://www.exist-db.org/">eXist</link> XML Database provides a <link
            href="http://www.exist-db.org/devguide_rest.html">REST API</link>, accessible through a
         URI of the form: <code>http://localhost:8080/exist/rest/db/coll/doc.xml</code>. Among other
         things, one can retrieve a document by sending a GET request, or upload a document with a
         PUT request. The stylesheet hereafter retrieves the following document from eXist (document
            <code>/db/tmp/in.xml</code>):</para>
      <para>
         <sample href="samples-2.xml.sample" kind="xml"/>
      </para>
      <para>then transform it to the following document:</para>
      <para>
         <sample href="samples-3.xml.sample" kind="xml"/>
      </para>
      <para>and eventually put it in eXist as the document <code>/db/tmp/out.xml</code>. The
         complete stylesheet is:</para>
      <para>
         <sample href="samples-1.xsl.sample" kind="xslt"/>
      </para>
      <para>The main result of the stylesheet is a side effect (the output document has been
         uploaded to eXist) but technically the result of the stylesheet itself (its main result
         tree, i.e. what you get on the screen when you run it from the command line) is the result
         of the PUT (not really useful, but I left it there for educational purpose):</para>
      <para>
         <sample href="samples-4.xml.sample" kind="xml"/>
      </para>
      <para>The equivalent XQuery module is as follows (this is just a simple translation of the
         above stylesheet into XQuery):</para>
      <para>
         <sample href="samples-10.xq.sample" kind="xquery"/>
      </para>
   </section>
   <section id="contacts">
      <title>Google Contacts API</title>
      <para> This sample uses the Google APIs to access your contact information, aka your address
         book, on your GMail or Google Apps account.</para>
      <para>The Google APIs provide a simple REST API: you just need to send an HTTP POST request
         with parameters encoded in application/x-www-form-urlencoded (that means the request body
         looks like: param1=value1&amp;param2=value2, with a bit of escaping). You first need to
         use the Authentication API to get an authentication token, that you'll pass to every call
         of other APIs. Then you can use the Contact API to get the data of all your contacts, then
         a second call to get the data of all the groups your contacts belong to.</para>
      <para>Before showing the whole stylesheet, here are what the three request should look like
         (more exactly what the elements representing the three HTTP request should look like). Here
         is the authentication call (indented for readability, but there shouldn't be any carriage
         return):</para>
      <para>
         <sample href="samples-5.xml.sample" kind="xml"/>
      </para>
      <para>The get feed call (for either contacts or groups, but the endpoint URI is different in
         both cases):</para>
      <para>
         <sample href="samples-6.xml.sample" kind="xml"/>
      </para>
      <para>Finally, this is the whole stylesheet. Run it by applying it to any XML document or with
         the initial template <code>main</code>, and setting both parameters account and pwd.</para>
      <para>
         <sample href="samples-7.xsl.sample" kind="xslt"/>
      </para>
   </section>
   <section id="soap">
      <title>SOAP request to a Web service</title>
      <para>Here is a complete stylesheet showing a sample of use of this extension that call a Web
         service by sending it a SOAP message:</para>
      <para>
         <sample href="samples-8.xsl.sample" kind="xslt"/>
      </para>
      <para>When you run the above stylesheet, you should get the following result:</para>
      <para>
         <sample href="samples-9.txt.sample"/>
      </para>
      <para> This is a real, complete example that formats the result besides preparing the request,
         but the interesting parts are really the global variable <code>$request</code> and the call
         to <code>http:send-request()</code>.</para>
   </section>
</webpage>

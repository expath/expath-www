<?xml version="1.0" encoding="UTF-8"?>

<?oxygen RNGSchema="http://expath.org/ns/xmlspec/xmlspec.rnc" type="compact"?>

<spec role="editors-copy" xmlns:ex="http://expath.org/ns/xmlspec">
   <header>
      <title>Web Application</title>
      <w3c-designation>w3c-designation</w3c-designation>
      <w3c-doctype>EXPath Candidate Module</w3c-doctype>
      <pubdate>
         <day>25</day>
         <month>November</month>
         <year>2012</year>
      </pubdate>
      <publoc>
         <loc href="http://expath.org/spec/webapp/editor"/>
      </publoc>
      <altlocs>
         <loc href="http://expath.org/spec/webapp/editor.xml">XML</loc>
      </altlocs>
      <!--latestloc>
         <loc href="http://expath.org/spec/webapp"/>
      </latestloc-->
      <!--prevlocs>
         <loc href="http://expath.org/spec/webapp/2009mmdd"/>
         <loc href="http://expath.org/spec/webapp/2009mmdd"/>
         ...
         </prevlocs-->
      <authlist>
         <author>
            <name>Florent Georges</name>
            <affiliation>H2O Consulting</affiliation>
         </author>
      </authlist>
      <copyright>
         <p/>
      </copyright>
      <abstract>
         <p>This specification defines how to write web applications on server-side, using XML
            technologies like XSLT, XQuery and XProc. It also defines their execution context, as
            well as some functions they can use. Last but not least it defines how to package such
            webapps, by using the <bibref ref="pkg"/>.</p>
      </abstract>
      <status>
         <p>Must be ignored, but is required by the schema...</p>
      </status>
      <langusage>
         <language>langusage</language>
      </langusage>
      <revisiondesc>
         <p>revisiondesc</p>
      </revisiondesc>
   </header>
   <body>
      <div1>
         <head>Introduction</head>
         <p>Bla bla bla</p>
         <div2>
            <head>Namespace conventions</head>
            <p>The webapp descriptor uses the namespace <code>http://expath.org/ns/webapp</code>, as
               the default namespace. This namespace is also used for the XML representation of the
               HTTP requests and responses, and to define several functions provided by the webapp
               container. In this document, the <code>web</code> prefix, when used, is bound to this
               namespace URI.</p>
            <p>Error codes are defined in the namespace <code>http://expath.org/ns/error</code>. In
               this document, the <code>err</code> prefix, when used, is bound to this namespace
               URI.</p>
         </div2>
      </div1>
      <div1>
         <head>Containers and webapps</head>
         <p>A web application, or webapp, in this specification, is a set of components,
            implementing an application. The application responds to HTTP requests and runs in a
            webapp container. The container provides the context of execution for the webapps,
            provides them with some functions, and is responsible for translating from and to HTTP.
            When the container receives an HTTP request, it identifies the corresponding component
            to process it (e.g. based on the request URL), builds an XML representation of the
            request, and call the component. The component receives the HTTP request as an XML
            document, and returns an XML description of the HTTP response to send back to the
            client. The container then translates this XML document and actually send the
            corresponding HTTP response.</p>
         <p>A component is a piece of XSLT, XQuery or XProc. Each type of component defines how the
            request is passed to and the response is returned by such a component. But the XML
            format of the requests and responses is always the same. The existing types of
            components are:</p>
         <ulist>
            <item>an XSLT stylesheet</item>
            <item>an XSLT function</item>
            <item>an XSLT template</item>
            <item>an XQuery query</item>
            <item>an XQuery function</item>
            <item>an XProc pipeline</item>
            <item>an XProc step</item>
         </ulist>
         <p>A webapp contains a descriptor, which defines how to dispatch a request to a specific
            component. The dispatching mechanism is based on the request URL, by associating a URL
            pattern to a component public URI (a component public URI is defined in the <bibref
               ref="pkg"/>, basically it is the component name, as an absolute URI). The association
            of a URL pattern to a component is called a servlet. Every servlet has a name.</p>
         <p>A webapp is installed at a specific context root. The context root is a path prefix, and
            all the request received "below" that prefix are served by that webapp. For instance, a
            webapp installed on example.org at the context root /somewhere will serve all requests
            with a URL starting with <code>http://example.org/somewhere/</code>. The part after that
            prefix is the path to the servlet.</p>
      </div1>
      <div1>
         <head>Requests and responses</head>
         <p>The HTTP requests and responses are represented as XML documents. The request is build
            by the container to represent the actual HTTP request received. The component returns a
            representation of the response, used by the container to actually respond to the client
            over HTTP. A sample request:</p>
         <eg>
&lt;request servlet="some" path="/some/resource" method="get" xmlns="http://expath.org/ns/webapp">
   &lt;url>http://example.org/myapp/some/resource&lt;/url>
   &lt;authority>http://example.org&lt;/authority>
   &lt;context-root>/myapp&lt;/context-root>
   &lt;path>
      &lt;part>/some/&lt;/part>
      &lt;match name="rsrc">resource&lt;/match>
   &lt;/path>
   &lt;header name="host" value="example.org"/>
   &lt;header name="user-agent" value="Firefox/7.0.1"/>
   &lt;header name="accept" value="text/html,application/xml;q=0.9,*/*;q=0.8"/>
   &lt;header name="accept-language" value="en-us,en;q=0.5"/>
&lt;/request>
</eg>
         <p>This request can be build by a container listening at http://example.org/, when received
            a request to GET the resource at /myapp/some/resource. We can see the path has been
            pre-analyzed, and the request contains various HTTP information like the method, the
            request URL (decomposed in different ways), and the headers. The request might also
            contain an entity content, also known as the body of the request (e.g. in case of a PUT
            request).</p>
         <p>In response to the above request, the onvoked component could return the following
            response to the container:</p>
         <eg>
&lt;response status="200" message="Ok" xmlns="http://expath.org/ns/webapp">
   &lt;header name="X-My-Header" value="Just an example."/>
   &lt;body content-type="application/xml">
      &lt;hello>World!&lt;/hello>
   &lt;/body>
&lt;/response></eg>
         <p>This tells the container to return the XML document
               <code>&lt;hello>World!&lt;/hello></code> to the client, using the Content-Type
            "application/xml", with the HTTP status code 200, and an extra header.</p>
         <div2>
            <head>Requests</head>
            <eg>
&lt;request servlet = NCName
         path = string
         method = NCName>
   url,
   authority,
   context-root,
   path,
   param*,
   header*,
   (body|
    multipart)?
&lt;/request></eg>
            <p>A request contains the name of the matched <code>servlet</code>, the request
                  <code>path</code>, and its <code>method</code> (also known as the HTTP verb, like
               GET and POST) in lower case. The text element <code>url</code> contains the original
               request URL, including its query parameters if any. The URL also appears cut down
               into several pieces. The element <code>authority</code> is its first part, including
               the URL scheme and the domain name, <code>context-root</code> is the webapp context
               root, <code>path</code> is an alternative representation of the requested path (as in
               the attribute <code>path</code>), where some specific parts have been analyzed, and
               the elements <code>param</code> represent the query parameters.</p>
            <p>Then come the HTTP <code>header</code> elements, each with a name and a value. Then
               the content of the HTTP entity (e.g. for a PUT), as an element <code>body</code> or
                  <code>multipart</code>, depending on the content type of the request.</p>
            <eg>
&lt;header name = string
        value = string/></eg>
            <p><kw>URL</kw></p>
            <p>The URL appears at several places in the request element, under different shapes. The
               element <code>url</code> is the original URL as typed by the user. Or at least it is
               an educated guess of what it could be, as HTTP does not include the original URL in
               the request (the port number for instance is not in the HTTP request).</p>
            <p>The element <code>authority</code> is the first part of the URL, including the URL
               scheme and the domain name (up to the slash first, but not including it). The scheme
               can be either "http:" or "https:". It is then followed by two slashes then the domain
               name.</p>
            <p>The element <code>context-root</code> is the webapp context root on this server. It
               is fixed for the webpp, and represents where the webapp has been "installed" on the
               server (the webapp serves all requests coming to URLs "below" its context root).</p>
            <p>After the element <code>path</code> (see below), the query parameters, if any, are
               represented each with an element <code>param</code>, with an attribute
                  <code>name</code> and an attribute <code>value</code>.</p>
            <eg>
&lt;param name = string
       value = string/></eg>
            <p>Note that the XPath expression "<code>fn:concat(authority, context-root,
               path)</code>" gives the original URL except the query parameters.</p>
            <p><kw>Path</kw></p>
            <p>The path is the part of the request URL that comes after the context root (excluding
               the query parameters). This is thus the part that can vary for a given webapp (for a
               given webapp, deployed on a specific server at a specific context root, everything up
               to and including the context root will be always the same). Servlets use regexes to
               match URLs, and they can give a name to some sub parts of the path matched by the
               regex (see the definition of the webapp descriptor for all details).</p>
            <p>This is represented by having, in the element <code>path</code>, a sequence of
               elements <code>part</code> and <code>match</code>. The elements <code>part</code> are
               the non-matched parts of the URL, and the elements <code>match</code> are the matched
               parts of the URL. They appear in the same order as in the URL.</p>
            <eg>
&lt;path>
   (part|
    match)+
&lt;/path>

&lt;part>
   <emph>string</emph>
&lt;/part>

&lt;match name = NCName>
   <emph>string</emph>
&lt;/part></eg>
            <p>As an example, let's say we have the following servlet definition, associating an
               XSLT stylesheet component to a URL pattern, and naming some specific parts of the
               URL:</p>
            <eg>
&lt;servlet name="user">
   &lt;xslt uri="http://example.org/myapp/users.xsl"/>
   &lt;url pattern="/users/([a-z0-9]+)">
      &lt;match group="1" name="id"/>
   &lt;/url>
&lt;/servlet></eg>
            <p>A request sent to /users/fgeorges would be served by that servlet. And the last part
               of the path would be assigned the name "id". The corresponding element <code>path</code>
               would then be:</p>
            <eg>
&lt;path>
   &lt;part>/users/&lt;/part>
   &lt;match name="id">fgeorges&lt;/match>
&lt;/path></eg>
            <p>The entire path is the string value of the element <code>path</code>. Put another
               way, concatenating all the <code>part</code> and <code>match</code> elements, in
               order, gives the value of the path. It is also available as the value of the
               attribute <code>path</code> on the element <code>request</code>.</p>
            <p><kw>Content</kw></p>
            <p>TODO: ...</p>
            <eg>
&lt;multipart ...>
   body+
&lt;/multipart>

&lt;body ...>
   ...
&lt;/body></eg>
         </div2>
         <div2>
            <head>Responses</head>
            <eg>
&lt;response status = integer
          message = string>
   header*,
   (body|
    multipart)?
&lt;/response></eg>
            <p>...</p>
            <eg>
&lt;multipart ...>
   body+
&lt;/multipart>

&lt;body ...>
   ...
&lt;/body></eg>
         </div2>
      </div1>
      <div1>
         <head>Examples (notes)</head>
         <eg>
&lt;webapp xmlns="http://expath.org/ns/webapp"
        xmlns:app="http://expath.org/ns/samples/servlex/hello"
        name="http://expath.org/samples/servlex/hello"
        abbrev="hello-world"
        version="0.1.0">

   &lt;title>Servlex hello-world application&lt;/title>

   &lt;resource pattern="/" rewrite="index.html" media-type="application/xhtml+xml"/>

   &lt;servlet name="xslt">
      &lt;xslt uri="http://expath.org/ns/samples/servlex/hello.xsl"
            function="app:hello-xslt"/>
      &lt;url pattern="/xslt"/>
   &lt;/servlet>

   &lt;servlet name="xquery">
      &lt;xquery function="app:hello-xquery"/>
      &lt;url pattern="/xquery"/>
   &lt;/servlet>

   &lt;servlet name="xproc">
      &lt;xproc uri="http://expath.org/ns/samples/servlex/hello.xproc"/>
      &lt;url pattern="/xproc"/>
   &lt;/servlet>

&lt;/webapp></eg>
         <p>...</p>
         <eg>
&lt;webapp name = uri
        abbrev = NCName
        version = string>
   title,
   resource*,
   *** <emph>TODO: Add filters, groups, etc.</emph> ***
   servlet+
&lt;/webapp></eg>
         <p>...</p>
         <eg>
&lt;servlet name? = NCName>
   <emph>component</emph>,
   url
&lt;/servlet>

&lt;xproc uri = uri
       step? = QName/>

&lt;xquery uri? = uri
        function? = QName/>

&lt;xslt uri = uri
      function? = QName
      template? = QName/>

&lt;url pattern? = URLPattern/></eg>
         <p>...</p>
         <eg>
&lt;response status="200" message="Ok" xmlns="http://expath.org/ns/webapp">
   &lt;header name="Content-Disposition" value="filename=the-file.txt"/>
   &lt;body content-type="application/zip" src="/some/path/to/the/file.txt"/>
&lt;/response></eg>
      </div1>
      <div1>
         <head>Bla bla bla</head>
         <p>...</p>
      </div1>
   </body>
   <back>
      <div1 id="expath-pkg.xsd">
         <head>Webapp schema</head>
         <eg><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="schema/webapp.xsd" parse="text"/></eg>
      </div1>
      <div1>
         <head>References</head>
         <blist>
            <bibl id="pkg" key="EXPath Packaging System">
               <loc href="http://expath.org/spec/pkg">Packaging System</loc>. Florent Georges,
               editor. EXPath. 9 May 2012.</bibl>
         </blist>
      </div1>
   </back>
</spec>

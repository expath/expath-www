<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.balisage.net/DocumentModels/balisage-1-1.rng" type="xml"?>

<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <title>EXPath: Packaging, and Web applications</title>
   <subtitle>A packaging system for XML libraries and a portable web application
      framework.</subtitle>
   <info>
      <confgroup>
         <conftitle>XML Prague</conftitle>
         <confdates>13 - 14 March 2010</confdates>
      </confgroup>
      <abstract>
         <para>EXPath is a project to define portable extensions to core XML technologies. The main
            means to doing so is the specification of libraries of XPath functions, usable within
            any XPath expressions evaluator, including XSLT, XQuery and XProc. But EXPath is also
            open to other kinds of specifications, like the Packaging System and the framework to
            write Web Applications, both described in this paper.</para>
      </abstract>
      <author>
         <personname>
            <firstname>Florent</firstname>
            <surname>Georges</surname>
         </personname>
         <personblurb>
            <para>Florent Georges is a freelance IT consultant in Brussels who has been involved in
               the XML world for 10 years, especially within the XSLT and XQuery communities. His
               main interests are in the field of XSLT and XQuery extensions and libraries,
               packaging, unit and functional testing, and portability between several processors.
               Since the beginning of 2009, he has worked on EXPath, to define "standard" tools and
               extension function libraries that can be used in XPath (so in XSLT, XQuery and XProc
               as well).</para>
         </personblurb>
         <affiliation>
            <jobtitle>XML Architect</jobtitle>
            <orgname>H2O Consulting</orgname>
         </affiliation>
         <email>fgeorges@fgeorges.org</email>
      </author>
      <legalnotice>
         <para>Copyright &#xA9; 2010 Florent Georges. Used by permission.</para>
      </legalnotice>
      <keywordset role="author">
         <keyword>EXPath</keyword>
         <keyword>extension</keyword>
         <keyword>XPath</keyword>
         <keyword>XSLT</keyword>
         <keyword>XQuery</keyword>
      </keywordset>
   </info>
   <section>
      <title>Introduce EXPath</title>
      <section>
         <title>History</title>
         <para>Exactly one year ago, in this same room during XML Prague 2009, the idea of EXPath
            was born. EXQuery was just launched and with some people we were trying to launch a new
            version of EXSLT, for XSLT 2.0. EXProc welcomed its first extensions, too. While all
            those projects make perfect sense regarding their own technology, they also overlap in
            providing some identical functionalities to their target languages. So the idea emerged
            here: acting at the XPath level to touch a broader audience and to define a same
            extension only once.</para>
         <para>So one year after it was born, this paper show the current state of the project and
            introduces some new ideas and modules.</para>
      </section>
      <section>
         <title>Processes &amp; goals</title>
         <para>The project is fundamentally a collaborative project. It is driven by the community
            (essentially a mix of the XSLT, XQuery and XProc communities). When people want to
            introduce a new module, for instance because they have to use such an extension within
            their own project and think there is an interest to share their work and benefit from
            the community feedback, then the first step is just to send an email to the EXPath
            mailing list. They can see if the idea is well received and if someone else is also
            interested in the same extension.</para>
         <para>Once the discussion is launched, the next step is to write a draft specification for
            this extension, and ask for feedback. The main project delivery unit is the
               <emphasis>module</emphasis>. A module is a loosely-defined concept, gathering
            everything related to the same functionality. For instance, all functions to deal with
            ZIP files (reading, writing, etc.) are grouped into the same module. Most of the time, a
            module is a library of XPath functions, but it could be anything related to core XML
            technologies. For instance the packaging system introduced below is a module. Common
            sense is our friend.</para>
         <para>The first objective of a module is to define an implementation-independent
            specification. It has always a maintainer, who is in charge of coordinating the efforts
            around the module. The tasks involved are leading the discussions, finding consensus
            when appropriate, writing and maintaining the spec(s) and the test suite(s), promoting
            the module and coordinating implementation and documentation efforts. His/her tools are
            the mailing list, the website, the community itself, the technical tools (editorial
            schemas, test suite tools, etc.), Subversion repositories, the wiki, and any relevant
            tool we could provide as a community project, supported by inpendent individuals.</para>
         <para>The utimate goal is to have the specifications endorsed by vendors and implemented
            directly by existing processors. But every vendors are not interested in providing the
            same extensions, so it sometimes makes sense to implement them as third-party
            extensions, and EXPath provides facilities to anyone willing to contribute such an
            implementation. It is worth noting that such implementations are also a good way to
            experiment and get feedback while in the process of writing the module
            specification.</para>
      </section>
      <!--section>
         <title>The HTTP Client module</title>
         <para>[ TODO: ] Describe two traditional function libraries: HTTP Client + ZIP, and show an
            example using them (in particular how user can write code to use them). Idea: backup of
            some Google service data into a ZIP archive (contacts data, agenda, or any other service
            with data accessible with Atom Pub or any REST API).</para>
      </section>
      <section>
         <title>The ZIP module</title>
         <para>[ TODO: ] And examples here too...</para>
      </section-->
   </section>
   <section>
      <title>Packaging System</title>
      <section>
         <title>Context</title>
         <para>If you work with XSLT or XQuery for a few years, I guess you already tried to install
            a third-party stylesheet or query, because it provided an out-of-the-box bar code
            formating facility or some utility functions to deal with a particular XML language. So
            you went to the library website, looked for the download page, downloaded the component
            somewhere on your computer, and read the installation instruction: <emphasis>put the
               stylesheet (or the query) in an appropriate place, please see your processor
               documentation</emphasis>. So you put the component <emphasis>somewhere</emphasis>,
            sometimes in the same directory than your stylesheets, sometimes you tried to create a
            kind of central repository on your system. And you finally succeeded, after you figured
            out the correct import statements, to run your transform from the command line. Then you
            tried to configure your new XML IDE to be able to run the same transforms. Then you
            integrated your components, and their dependencies, into the enterprise application that
            uses then. Or even worse, you tried to find a way to deliver your stylesheets or queries
            as a library, and had to take care about their third-party dependencies.</para>
         <para>Then you needed the new version of that third-party library...</para>
         <para>Why couldn't you just ask your tools: <emphasis>could you use this and that
               libraries, please</emphasis>? After all, every XML technologies use the same tool to
            identify dependencies: a URI. You want to use an XQuery library module? You have to give
            its namespace URI. You want to import a stylesheet module? You have to give its URI. You
            want to use an XProc pipeline? Well, guess what...</para>
         <para>Actually URIs are very good at that game. There can be any level of indirections: the
            processor itself, either if it knows the resource built-in, or if it resolves it through
            its own documented mechanism, but also some configuration options, or networking
            redirections. There is even a standard format to express URI redirections as an XML
            document, or set of documents: XML Catalogs, from OASIS. (Most of) the existing
            processors support (some of) those and other redirecting technologies, (more or less)
            out of the box.</para>
         <para>So why is it still so difficult to install an XSLT or XQuery library? In fact, while
            the installation is not always easy, that's much the delivery of the components that is
            difficult. For now, you cannot really do nothing much than putting your components into
            a ZIP file or any other archive format, and say <emphasis>please see you processor
               documentation</emphasis>.</para>
         <para>It is interesting to note that even though XQuery has a module system that enforces
            associating a URI to a library module, the situation is not much better than for XSLT.
            It seems sometimes easier to find a place where to put the queries on an XML database
            server, because it controls its own data space, as opposed to a standalone processor.
            But some of those XML databases do not allow one to choose his/her own resolution
            mechanism, requiring importing queries to use an implementation-defined "at hint" in its
            import statements. Furthermore, publishing a library does not mean only providing its
            components and the associated URIs. Some components are private and are just library's
            internals. Or another component is an extension developed in another language. Or yet
            another component is specific to a given processor.</para>
         <para>The key is a common, portable packaging format.</para>
         <para>A format that allows library authors to package their libraries without having to
            worry about it. A common format understood by most of the existing processors. A format
            that allows you to package a consistent library, not regarding the technologies it uses,
            but its purpose: a format that allows you to deliver XSLT stylesheets, XQuery modules,
            XML Schemas and XProc pipelines all together.</para>
      </section>
      <section>
         <title>Architecture</title>
         <para>As noted above, all XML technologies use URIs to identify dependencies. So the first
            thing to do in order to resolve a URI to a resource is to get this URI. As explained,
            XQuery has a first-class module system, and enforces the fact that a library module has
            an associated URI: its target namespace. Other technologies, like XSLT and XProc, do not
            have such a built-in module system. You have to use a URI to refer to an XSLT
            stylesheet, but nothing force a user to use the same URI. Nothing is provided to the
            library author to say: <emphasis>this is the public URI associated to this
               stylesheet</emphasis>.</para>
         <para>The EXPath Packaging System associates a <emphasis role="bold">public URI</emphasis>
            to every public components. A public component is any XSLT stylesheet, XQuery module,
            XProc pipeline, XML Schema or any other supported technology, aimed to be used directly
            by the user. For instance, a top-level stylesheet is a public component, but not some of
            the other stylesheets it imports, providing only private tools intern to the library
            itself. The library author chooses the public URIs for his/her components. The user can
            use those public URIs in other components. For instance in a stylesheet importing your
            stylesheet. Because the public URIs are defined once by the library author, there is no
            more the problem of modifying import statements in a third-party library just because
            its author does not use the same processor than you.</para>
         <para>When you provide a processor supporting the packaging system with a package, it will
            install its content in some implementation-defined way. The way to provide the processor
            with the package is implementation-defined itself. It can be by using a web-based admin
            console, by putting the package in a predefined directory, or by using an XML IDE
            graphical interface to manage a local repository on the disk, shared by several
            processors. What is important is that the processor finds the correct component when you
            use its public URI in, say, an <code>xsl:import</code> statement:</para>
         <programlisting>
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="2.0">

   &lt;!-- there is nothing at that URL, the module must have been installed -->
   &lt;xsl:import href="http://example.org/project/something.xsl"/>

   ...
</programlisting>
         <para>This matches the usual way to deal with dependencies with other languages: you write
            on the one hand the code that uses a library in a canonical way, especially regarding
            how it references the imported library, and you maintain the list of installed packaged
            on the other hand, in an implementation-dependent way.</para>
      </section>
      <section>
         <title>The package format</title>
         <para>A package is a simple ZIP file containing the components (i.e. the source files). In
            order to achieve independence on the processor, the package format must provide enough
            information to map the public URIs to their respective components. This information, as
            well as a few others like the name of the package, are provided within the package
            descriptor. The package descriptor is a file named <code>expath-pkg.xml</code> at the
            root of the package ZIP file.</para>
         <para>If we take Priscilla Walmsley's famous FunctX library as an example, we could have
            the following package descriptor:</para>
         <programlisting>
&lt;package xmlns="http://expath.org/ns/pkg"
         name="http://functx.com/"
         version="1.0">
   &lt;title>FunctX library&lt;/title>
   &lt;xquery>
      &lt;uri>http://functx.com&lt;/uri>
      &lt;resource>functx.xql&lt;/resource>
   &lt;/xquery>
   &lt;xslt>
      &lt;uri>http://functx.com/functx.xsl&lt;/uri>
      &lt;resource>functx.xsl&lt;/resource>
   &lt;/xslt>
&lt;/package>
</programlisting>
         <para>That is, the descriptor declares two public components: an XQuery library module and
            an XSLT stylesheet. For each it gives its public URI and the source file containing the
            component. The structure of the package ZIP file itself is very simple:</para>
         <programlisting>
expath-pkg.xml
content/
   functx.xql
   functx.xsl
</programlisting>
      </section>
      <section>
         <title>A "system", you said?</title>
         <para><emphasis>Ok, so you have a package format. But why do you call it a package
               "system"?</emphasis></para>
         <para>This packaging format supports various XML technologies: XSLT, XQuery, XProc, XML
            Schema, RelaxNG, Schematron and NVDL. Besides these standard component types, the
            package format has been designed to be extensible in two ways. First, vendors can extend
            it in a controled way to describe components specific to their processor. That could be
            as simple as having standard components using vendor-specific extensions, or as complex
            as extensions written in another language, like Java or C++. Second, another
            specification can use this packaging format as a basis, and add specific informations
            either in the package descriptor, or in additional files within the ZIP structure. This
            is for instance the approach taken by the Webapp module, introduced later in this
            paper.</para>
         <para>Besides these extensibility mechanisms, this format allows the creation of repository
            management softwares, support within XML IDEs, or even the CXAN system. CXAN is a
            central repository of packages, and its associated tool to manage a local repository,
            automatically downloading and installing packages from the internet and resolving
            dependencies. It means Comprehensive XML Archive Network, and is named after CTAN and
            CPAN, the same kind of websites and tools for resp. TeX and Perl.</para>
         <para>The packaging system can be the basis to spread core XML technologies around, by
            giving them a way to build a strong basis of libraries.</para>
      </section>
      <!--section>
         <title>Example</title>
         <para>[ TODO: ] Write a complete example with schemas, stylesheets, queries, pipelines, ...
            Show how it works under oXygen (through using the on-disk repository), Saxon, Calabash,
            eXist...</para>
      </section-->
   </section>
   <section>
      <title>Web Applications</title>
      <section>
         <title>Context</title>
         <para>These days, more and more applications are developed as <emphasis>web
               applications</emphasis>. I do not want to even try to define what's a web
            application, but let's say that is an application running on a server, and which
            interacts with the rest of the world (usually end users) by responding to HTTP requests.
            XML technologies are not an exception, and most processors offer a way to be accessed
            via HTTP, from the simple REST API to access the processor features themselves, to
            frameworks to build entire web applications.</para>
         <para>In such systems, an HTTP request arrives to the server, which looks at the URI to
            identify how to respond to this request. The URI will resolve either in a static page,
            an internal server routine or in a user component, for instance an XQuery module. The
            module can then use functions provided by the server to access information from the HTTP
            request, like its headers, and to set properties of the response, like the HTTP response
            code. The XQuery module will usually access a database (in read and/or write) and
            extract some data, then it will transform this data to the format the user expect it
            (for instance in HTML, or in a standard XML vocabulary).</para>
         <para>As usual, the way to plug your components in such a system, as well as the way it can
            interact with it (accessing information from the request and providing the response) is
            implementation-defined. Even though most of those informations are exactly the same on
            all those systems: they are defined by the HTTP request-response model.</para>
         <para>Besides the benefit of writing end-user web applications in a processor-independent
            way, such a standard mechanism to deploy XML-based web applications would allow writing
            frameworks for web applications directly in XQuery, XProc or XSLT (or more likely a mix
            of them). Most popular frameworks for Java web applications for instance, like Struts or
            Spring MVC, could be developed because the Java Servlet specification existed. Having a
            mechanism similar to servlets would allow to write MVC frameworks in an
            implementation-independent way.</para>
      </section>
      <section>
         <title>Architecture</title>
         <para>A web application is a set of entry points. An entry point can be an XPath function
            (provided by an XQuery library module, a stylesheet, or any other means), an XSLT named
            template, an XQuery main module, an XSLT stylesheet or an XProc pipeline. Each kind of
            entry point must follow different rules regarding how it accesses the request data and
            how it provides the response content (for instance a function will get the request as
            parameter, while an XQuery main module will get it as an external variable), but besides
            these slightly different interfaces, they can do the same thing.</para>
         <para>Each entry point is associated a regular expression to match the URI a request is
            sent to. When a request is sent to server, the web container try to match the accessed
            URI to an entry point. A representation of the request is build as an element node
            (gathering informations like the HTTP headers, the request body content, etc.). This
            request element is passed to the entry point component (for instance an XPath function).
            The return value of this component is used to create the response to send back to the
            user.</para>
         <para>
            <mediaobject>
               <imageobject>
                  <imagedata format="png" fileref="webapp.png" align="center"/>
               </imageobject>
            </mediaobject>
         </para>
         <para>A request element looks like the following:</para>
         <programlisting>
&lt;request servlet="srv-1" path="/some/page" method="post">
   &lt;uri>http://www.host.org:8000/myapp/some/page&lt;/uri>
   &lt;context-root>/myapp&lt;/context-root>
   &lt;path>
      &lt;part>/some/&lt;/part>
      &lt;match>page&lt;/match>
   &lt;/path>
   &lt;auth method="basic" username="user">
      &lt;basic sesame="YWRtaW46YWRtaW5hZG1pbg==" password="..."/>
   &lt;/auth>
   &lt;header name="host" value="www.host.org"/>
   &lt;header name="connection" value="keep-alive"/>
   &lt;multipart content-type="multipart/alternative"
              boundary="=-=-=-=-=-=">
      &lt;body content-type="text/plain"/>
      &lt;body content-type="text/html"/>
      &lt;body content-type="application/xml"/>
   &lt;/multipart>
&lt;/request></programlisting>
         <para>The evaluation of the component (for instance calling the XPath function or running
            the query module) will give the result to send back to the user. The result is also
            represented as an element node, but representing an HTTP response instead of a request.
            It looks like the following:</para>
         <programlisting>
&lt;response status="200" message="Ok">
   &lt;header name="x-myheader" value="My own header value"/>
   &lt;body content-type="text/plain">Hello, world!&lt;/body>
&lt;/response></programlisting>
         <para>In order to deploy an application, the web container needs to know the match patterns
            and their associated URI patterns. The user gives those informations as an XML document:
            the deployment descriptor. It lists the entry points with their components and URI
            patterns, as well as a few other configuration infos:</para>
         <programlisting>
&lt;webapp xmlns="http://expath.org/ns/webapp"
         xmlns:my1="http://mycorp.com/proj/my-app/servlet-1"
         xmlns:my2="http://mycorp.com/proj/my-app/servlet-2"
         name="http://fgeorges.org/example/my-webapp"
         abbrev="my-webapp"
         version="0.1">

   &lt;title>My simple web application&lt;/title>

   &lt;context>
      &lt;param name="webmaster" value="webmaster@mycorp.com"/>
      &lt;param name="collection" value="http://mycorp.com/dataset"/>
   &lt;/context>
   &lt;page>
      &lt;url pattern="/(.+)\.html"/>
   &lt;/page>

   &lt;servlet name="srv-xq-1">
      &lt;xquery function="my1:servlet"/>
      &lt;url pattern="/catalog/(.+)"/>
   &lt;/servlet>

   &lt;servlet name="srv-xq-2">
      &lt;xquery resource="servlet-2.xq"/>
      &lt;url pattern="/xq2/(.+)"/>
   &lt;/servlet>

   &lt;servlet name="srv-xsl-1">
      &lt;xslt uri="http://www.mycorp.com/proj/my-app/servlet-2.xsl"
            template="my2:servlet"/>
      &lt;url pattern="/(.+)-xsl/1/"/>
   &lt;/servlet>

&lt;/webapp></programlisting>
         <para>After a few infos about the application itself, like its title and some configuration
            parameters, the descriptor declares the various end points with the element
               <code>servlet</code>. Each of them references a component (like an XSLT named
            template or an XQuery main module) and a URI pattern. Based on this deployment
            descriptor, the web container is able to dispatch the HTTP requests to the correct end
            point.</para>
         <para>The last part of the architecture is how to provide the web container with the data.
            This one is easy: it is built upon the packaging <emphasis>system</emphasis>. A web
            archive has exactly the same structure as a regular package. A ZIP file with all
            components, and the package descriptor <code>expath-pkg.xml</code> at the root of the
            package. For a web archive, one just has to add the deployment descriptor, called
               <code>expath-web.xml</code>, next to the package descriptor.</para>
      </section>
      <section>
         <title>ServleX</title>
         <para>ServleX is an early implementation of this specification, using Java Servlet
            technologies for the integration with HTTP, and Saxon and Calabash for its X* processors
            (to actually evaluate the XSLT, XQuery and XProc components). But the main target of
            this specification is of course existing XML databases like eXist and MarkLogic, and
            more specialized solutions like Sausalito. Because it uses Java Servlet, it can be
            deployed in any servlet container, like Tomcat, Jetty, GlassFish, WebLogic, etc.</para>
         <para>Let's look at a real example. This example is verry simple. The webapp contains only
            one component, a function defined in an XQuery library module:</para>
         <programlisting>
module namespace my = "http://my-corp.com/";
declare namespace srv = "http://expath.org/ns/webapp";

declare function my:servlet($req as element(srv:request), $bodies as item()*)
  as element(srv:response)
{
  &lt;srv:response status="200" message="Ok">
    &lt;srv:body content-type="text/plain"> {
      string-join(('Path: ', $req/srv:path/*), '')
    }
    &lt;/srv:body>
  &lt;/srv:response>
};</programlisting>
         <para>The deployment descriptor looks like:</para>
         <programlisting>
&lt;webapp xmlns="http://expath.org/ns/webapp"
         xmlns:my="http://my-corp.com/"
         name="http://my-corp.com/example"
         abbrev="my-webapp"
         version="1.0">

   &lt;title>A sample web application&lt;/title>

   &lt;!-- catch all requests -->
   &lt;servlet name="my-servlet">
      &lt;xquery function="my:servlet"/>
      &lt;url pattern="/(.+)"/>
   &lt;/servlet>

&lt;/webapp></programlisting>
         <para>All requests will be dispatched to the only one servlet, which will return a
            text/plain body with the string <code>Path: /some/path</code>, with the path requested
            by the client.</para>
      </section>
      <section>
         <title>Future</title>
         <para>Like Java Servlet, this is really a low-level technology in the web application
            development process. But because it is aimed to be independent on any specific
            implementation, it will allow writing separate frameworks to provide more high-level
            features, like general-purpose web MVC frameworks handling mapping from requests to
            components by using their file names for instance.</para>
         <para>This specification is in its early stage but the current state already allows to
            write working, simple web applications entirely in core XML technologies. If you have
            any idea and want to contribute, just have a look at <link
               xlink:href="http://expath.org/"/> and join the mailing list!</para>
      </section>
   </section>
   <!--section>
      <title>A comprehensive example</title>
      <para>[ TODO: ] Show a sample using all of HTTP Client, ZIP, Pkg and Webapp. First a webapp
         with both web and REST interfaces. Then a client that uses the REST API to create an ODF
         document (maybe a pipeline that 1/ gets the data, 2/ build an internal data model, 3/
         choose between formating in ODF or OOXML or PDF...) Show how it reacts without the ZIP
         module, then after having added it to the repo (cxan install expath-zip).</para>
   </section-->
   <section>
      <title>Conclusion</title>
      <para>The EXPath project is just one year, and it seems a lot of people are already looking
         forward to useful modules, following the feedback received, both from users and vendors.
         Its goal is not to be comprehensive nor to try to write specifications for everything
         possible, but instead to be a central place to coordinate the efforts to write practical
         extensions in a standard and collaborative way.</para>
      <para>If you want to get more information, and maybe to join the mailing list, have a lok at
         the <link xlink:href="http://expath.org/">website</link>.</para>
   </section>
</article>
